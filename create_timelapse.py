#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ-—Ç–∞–π–º–ª–∞–ø—Å–∞ –∏–∑ –¥–∞–º–ø–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞ –¥–µ–Ω—å –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ.
"""

import os
import glob
import logging
from datetime import datetime, timedelta, timezone
from PIL import Image, ImageDraw
import cv2
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
OUTPUT_DIR = "output"
TIMELAPSE_DIR = "timelapse"
VIDEO_WIDTH = 1920
VIDEO_HEIGHT = 1080
FPS = 30  # 30 –∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
BACKGROUND_COLOR = (255, 255, 255)  # –ë–µ–ª—ã–π —Ñ–æ–Ω
TOMSK_TZ = timezone(timedelta(hours=7))
BORDER_COLOR = (255, 0, 0)
BORDER_THICKNESS = 8

def get_images_for_date(date_str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    
    Args:
        date_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """
    pattern = os.path.join(OUTPUT_DIR, f"merged_tiles_{date_str}_*.png")
    images = glob.glob(pattern)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ª–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ (YYYYMMDD + HHMMSS) –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    def extract_sort_key(path):
        base = os.path.basename(path)
        parts = base.split('_')
        # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: merged_tiles_YYYYMMDD_HHMMSS.png
        if len(parts) >= 4 and parts[0] == 'merged' and parts[1] == 'tiles':
            date_part = parts[2]
            time_part = parts[3].split('.')[0]
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ == —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É
            return f"{date_part}{time_part}"
        # –§–æ–ª–±—ç–∫ ‚Äî –≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        return os.path.getmtime(path)

    images.sort(key=extract_sort_key)
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ {date_str}")
    return images

def resize_image_to_fit(image, target_width, target_height, background_color=(255, 255, 255)):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –±–µ–ª—ã–π —Ñ–æ–Ω.
    
    Args:
        image (PIL.Image): –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        target_width (int): –¶–µ–ª–µ–≤–∞—è —à–∏—Ä–∏–Ω–∞
        target_height (int): –¶–µ–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞
        background_color (tuple): –¶–≤–µ—Ç —Ñ–æ–Ω–∞
        
    Returns:
        PIL.Image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
    """
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    img_width, img_height = image.size
    scale_w = target_width / img_width
    scale_h = target_height / img_height
    scale = min(scale_w, scale_h)
    
    # –ù–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    new_width = int(img_width * scale)
    new_height = int(img_height * scale)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    resized_image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    result = Image.new('RGB', (target_width, target_height), background_color)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    x = (target_width - new_width) // 2
    y = (target_height - new_height) // 2
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    if resized_image.mode == 'RGBA':
        result.paste(resized_image, (x, y), resized_image)
    else:
        result.paste(resized_image, (x, y))
    
    return result

def add_timestamp_overlay(image, timestamp, font_size=36):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    
    Args:
        image (PIL.Image): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        timestamp (str): –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
        font_size (int): –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
        
    Returns:
        PIL.Image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    """
    draw = ImageDraw.Draw(image)
    
    # –ü–æ–∑–∏—Ü–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª)
    text_position = (image.width - 300, image.height - 50)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    text_bbox = draw.textbbox(text_position, timestamp)
    draw.rectangle([text_bbox[0] - 10, text_bbox[1] - 5, text_bbox[2] + 10, text_bbox[3] + 5], 
                  fill=(0, 0, 0, 128))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    draw.text(text_position, timestamp, fill=(255, 255, 255), stroke_width=2, stroke_fill=(0, 0, 0))
    
    return image

def add_red_border(image, border_thickness=BORDER_THICKNESS, color=BORDER_COLOR):
    """
    –†–∏—Å—É–µ—Ç —Ä–∞–º–∫—É –ø–æ –∫—Ä–∞—è–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        image (PIL.Image): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        border_thickness (int): –¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        color (tuple): –¶–≤–µ—Ç —Ä–∞–º–∫–∏ (R, G, B)
    
    Returns:
        PIL.Image: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–º–∫–æ–π
    """
    draw = ImageDraw.Draw(image)
    width, height = image.size
    half = max(1, border_thickness // 2)
    left = half
    top = half
    right = width - 1 - half
    bottom = height - 1 - half
    draw.rectangle([left, top, right, bottom], outline=color, width=border_thickness)
    return image

def create_timelapse_video(images, output_path):
    """
    –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ-—Ç–∞–π–º–ª–∞–ø—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    
    Args:
        images (list): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        output_path (str): –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not images:
        logger.error("–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–ª–∞–ø—Å–∞")
        return False
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ writer
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        video_writer = cv2.VideoWriter(output_path, fourcc, FPS, (VIDEO_WIDTH, VIDEO_HEIGHT))
        
        logger.info(f"–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ —Å {len(images)} –∫–∞–¥—Ä–∞–º–∏, FPS: {FPS}")
        
        for i, image_path in enumerate(images):
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                pil_image = Image.open(image_path)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                filename = os.path.basename(image_path)
                # –§–æ—Ä–º–∞—Ç: merged_tiles_YYYYMMDD_HHMMSS.png
                parts = filename.split('_')
                if len(parts) >= 3:
                    date_part = parts[2]
                    time_part = parts[3].split('.')[0]
                    timestamp = f"{date_part[:4]}-{date_part[4:6]}-{date_part[6:8]} {time_part[:2]}:{time_part[2:4]}:{time_part[4:6]}"
                else:
                    timestamp = f"–ö–∞–¥—Ä {i+1}"
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –±–µ–ª—ã–π —Ñ–æ–Ω
                resized_image = resize_image_to_fit(pil_image, VIDEO_WIDTH, VIDEO_HEIGHT, BACKGROUND_COLOR)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                final_image = add_timestamp_overlay(resized_image, timestamp)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É
                final_image = add_red_border(final_image)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ OpenCV —Ñ–æ—Ä–º–∞—Ç
                opencv_image = cv2.cvtColor(np.array(final_image), cv2.COLOR_RGB2BGR)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä –≤ –≤–∏–¥–µ–æ
                video_writer.write(opencv_image)
                
                if (i + 1) % 10 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i + 1}/{len(images)} –∫–∞–¥—Ä–æ–≤")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º video writer
        video_writer.release()
        logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return False

def update_readme_with_timelapse_link(date_str, video_filename):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç README.md —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–∞–π–º–ª–∞–ø—Å.
    
    Args:
        date_str (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD
        video_filename (str): –ò–º—è —Ñ–∞–π–ª–∞ –≤–∏–¥–µ–æ
    """
    readme_path = "README.md"
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π README
        with open(readme_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = f"{date_str[:4]}-{date_str[4:6]}-{date_str[6:8]}"
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
        video_link = f"[üé¨ –¢–∞–π–º–ª–∞–ø—Å –∑–∞ {formatted_date}](./timelapse/{video_filename})"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–µ–∫—Ü–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç–∞–π–º–ª–∞–ø—Å–æ–º
        timelapse_section_marker = "## üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∞–π–º–ª–∞–ø—Å"
        
        if timelapse_section_marker in content:
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —Å–µ–∫—Ü–∏–∏
            start_pos = content.find(timelapse_section_marker)
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Å–µ–∫—Ü–∏–∏ (—Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞)
            next_section = content.find("\n## ", start_pos + 1)
            
            if next_section == -1:
                # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ–∫—Ü–∏—è, –∑–∞–º–µ–Ω—è–µ–º –¥–æ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞
                new_content = content[:start_pos] + f"{timelapse_section_marker}\n\n{video_link}\n\n"
            else:
                # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é
                new_content = content[:start_pos] + f"{timelapse_section_marker}\n\n{video_link}\n\n" + content[next_section:]
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            lines = content.split('\n')
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—Ä–æ–µ–∫—Ç–∞
            insert_pos = 0
            for i, line in enumerate(lines):
                if line.startswith('# ') and i == 0:
                    continue
                if line.strip() == '':
                    continue
                insert_pos = i
                break
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é
            lines.insert(insert_pos, f"{timelapse_section_marker}\n")
            lines.insert(insert_pos + 1, f"{video_link}\n")
            new_content = '\n'.join(lines)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π README
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        
        logger.info(f"README.md –æ–±–Ω–æ–≤–ª–µ–Ω —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–∞–π–º–ª–∞–ø—Å: {video_link}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ README.md: {e}")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞.
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–∞–π–º–ª–∞–ø—Å–æ–≤
    os.makedirs(TIMELAPSE_DIR, exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—á–µ—Ä–∞—à–Ω—é—é –¥–∞—Ç—É (—Ç–∞–∫ –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç –æ–±—ã—á–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
    yesterday = datetime.now(TOMSK_TZ) - timedelta(days=1)
    date_str = yesterday.strftime("%Y%m%d")
    
    logger.info(f"–°–æ–∑–¥–∞—é —Ç–∞–π–º–ª–∞–ø—Å –∑–∞ {date_str}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ –¥–µ–Ω—å
    images = get_images_for_date(date_str)
    
    if not images:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ {date_str}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    output_filename = f"timelapse_{date_str}.mp4"
    output_path = os.path.join(TIMELAPSE_DIR, output_filename)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–ª–∞–ø—Å
    success = create_timelapse_video(images, output_path)
    
    if success:
        logger.info(f"–¢–∞–π–º–ª–∞–ø—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {output_path}")
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–∞–π–º–ª–∞–ø—Å
        latest_path = os.path.join(TIMELAPSE_DIR, "latest.mp4")
        if os.path.exists(latest_path):
            os.remove(latest_path)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞–∫ latest.mp4
        import shutil
        shutil.copy2(output_path, latest_path)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∫–æ–ø–∏—è –∫–∞–∫: {latest_path}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º README.md —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞–π–º–ª–∞–ø—Å
        update_readme_with_timelapse_link(date_str, output_filename)
        
        return True
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–ª–∞–ø—Å")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
